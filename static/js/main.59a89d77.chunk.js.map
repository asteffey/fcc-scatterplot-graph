{"version":3,"sources":["hooks/useD3.js","components/ScaledD3Container.js","d3-plus/index.js","components/CyclistChart/CyclistChart.d3.js","components/CyclistChart/index.js","components/App.js","serviceWorker.js","index.js"],"names":["useD3","fn","ref","useRef","useEffect","d3","current","SvgContainer","styled","div","ScaledD3Container","drawSvg","viewBox","width","height","draw","useCallback","container","svg","append","attr","_d3","tip","legendColor","selection","prototype","appendForEach","obj","data","this","selectAll","enter","getYear","Year","getDuration","duration","getCategory","datum","getX","x","getY","y","toHtml","Time","Place","Name","Nationality","Doping","dopped","length","appendDuration","cyclist","Date","Seconds","appendX","yearScale","appendY","durationScale","pad","padding","d3CyclistChart","svgWidth","svgHeight","xMin","yMin","xMax","yMax","json","then","map","scaleLinear","domain","extent","range","scaleTime","xAxis","axisBottom","yAxis","axisLeft","call","tickFormat","format","style","tickSize","utcFormat","pointRadius","Math","ceil","direction","offset","max","min","html","color","scaleOrdinal","schemeCategory10","Set","sort","legend","title","shape","shapeRadius","shapePadding","scale","legendBox","node","getBBox","legendX","legendY","insert","legendPadding","on","show","hide","FullScreenContainer","marginTop","CyclistChart","useDimensions","id","dCyclistChart","App","useFccTest","fccTest","FccTests","scatter_plot","queryParam","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59a89d77.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport { useRef, useEffect } from 'react';\n\nconst useD3 = (fn) => {\n    const ref = useRef();\n\n    useEffect(\n        () => fn(d3.select(ref.current)),\n        [fn]\n    );\n\n    return ref;\n};\n\nexport default useD3;","import React, { useCallback } from 'react';\nimport useD3 from '../hooks/useD3';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst SvgContainer = styled.div`\n    display: block;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    svg {\n        display: block;\n        width: 100%;\n        height: 100%;\n    }\n`;\n\nconst ScaledD3Container = ({ drawSvg, viewBox: { width = 100, height = 100 } }) => {\n    const draw = useCallback(container => {\n        const svg = container.append('svg')\n            .attr('preserveAspectRatio', 'xMidYMid meet')\n            .attr('viewBox', `0 0 ${width} ${height}`);\n\n        drawSvg(svg, width, height);\n    }, [drawSvg, width, height]);\n    \n    const ref = useD3(draw);\n\n    return (\n        <SvgContainer ref={ref} />\n    );\n};\n\nScaledD3Container.propTypes = {\n    drawSvg: PropTypes.func.isRequired,\n    viewBox: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    })\n};\n\nexport default ScaledD3Container;","import * as _d3 from 'd3';\nimport tip from 'd3-tip';\nimport { legendColor } from 'd3-svg-legend';\n\nconst d3 = { ..._d3, tip, legendColor };\n\nd3.selection.prototype.appendForEach = function (obj, data) { \n    return this.selectAll(null).data(data).enter().append(obj);\n};\n\nexport default d3;\n","import d3 from '../../d3-plus';\n\nconst cyclistDataUrl = 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json';\n\nconst category = 'Nationality';\n\nconst getYear = ({Year}) => Year;\nconst getDuration = ({duration}) => duration;\n// const getNationality = ({Nationality}) => Nationality;\nconst getCategory = (datum) => datum[category];\nconst getX = ({x}) => x;\nconst getY = ({y}) => y;\n\nconst toHtml = ({Time, Place, Name, Year, Nationality, Doping }) => {\n    const dopped = Doping.length > 0;\n    return `\n        <table>\n            <tr>\n                <td>Name</td>\n                <td>${Name}</td>\n            </tr>\n            <tr>\n                <td>Nationality</td>\n                <td>${Nationality}</td>\n            </tr>\n            <tr>\n                <td>Time</td>\n                <td>${Time}</td>\n            </tr>\n            <tr>\n                <td>Place</td>\n                <td>${Place}</td>\n            </tr>\n            <tr>\n                <td>Year</td>\n                <td>${Year}</td>\n            </tr>\n            <tr>\n                <td>Doping</td>\n                <td>${dopped ? 'Yes' : 'No'}</td>\n            </tr>\n        </table>\n        ${dopped ? `<p>${Doping}</p>` : ''}`;\n};\n\nconst appendDuration = (cyclist) => ({duration: new Date(cyclist.Seconds * 1000), ...cyclist});\nconst appendX = (yearScale) => (cyclist) => ({x: yearScale(cyclist.Year), ...cyclist});\nconst appendY = (durationScale) => (cyclist) => ({y: durationScale(cyclist.duration), ...cyclist});\n\nconst pad = ([min, max], padding) => ([min - padding, max + padding]);\n\n\nconst d3CyclistChart = (svg, svgWidth, svgHeight) => {\n    const padding = { top: 15, right: 35, bottom: 80, left: 80 };\n\n    const xMin = padding.left;\n    const yMin = padding.top;\n    const width = svgWidth - xMin - padding.right;\n    const height = svgHeight - yMin - padding.bottom;\n    const xMax = xMin + width;\n    const yMax = yMin + height;\n\n    d3.json(cyclistDataUrl)\n        .then(data => data.map(appendDuration))\n        .then(data => ({\n            data,\n            yearScale: d3.scaleLinear()\n                .domain(pad(d3.extent(data, getYear), 1))\n                .range([xMin, xMax]),\n            durationScale: d3.scaleTime()\n                .domain(d3.extent(data, getDuration))\n                .range([yMin, yMax])\n        }))\n        .then(({ data, yearScale, durationScale }) => ({\n            data: data.map(appendX(yearScale)).map(appendY(durationScale)),\n            xAxis: d3.axisBottom(yearScale),\n            yAxis: d3.axisLeft(durationScale)\n        }))\n        .then(({ data, xAxis, yAxis }) => {\n            svg.append('g')\n                .attr('id', 'x-axis')\n                .attr('transform', `translate(0, ${yMax})`)\n                .call(xAxis.tickFormat(d3.format('d')))\n                .selectAll('text')\n                .style('text-anchor', 'end')\n                .attr('dx', '2.9em')\n                .attr('dy', '0.2em')\n                .attr('transform', 'rotate(70)');\n\n            svg.append('g')\n                .attr('transform', `translate(0, ${yMax})`)\n                .attr('class', 'grid')\n                .call(xAxis.tickFormat('').tickSize(-height));\n\n            svg.append('g')\n                .attr('id', 'y-axis')\n                .attr('transform', `translate(${xMin}, 0)`)\n                .call(yAxis.tickFormat(d3.utcFormat('%M:%S')))\n                .selectAll('text')\n                .style('text-anchor', 'end')\n                .attr('dx', '0.3em')\n                .attr('dy', '-0.1em')\n                .attr('transform', 'rotate(-45)');\n\n            svg.append('g')\n                .attr('transform', `translate(${xMin}, 0)`)\n                .attr('class', 'grid')\n                .call(yAxis.tickFormat('').tickSize(-width));\n\n            const pointRadius = Math.ceil(width / 100);\n\n            const tip = d3.tip()\n                .direction('n')\n                .offset(({ x, y }) => [\n                    Math.max(0, yMin + 250 - y),\n                    Math.min(0, xMax - 70 - x)\n                ])\n                .attr('id', 'tooltip')\n                .attr('data-year', getYear)\n                .html(toHtml);\n            svg.call(tip);\n\n            const color = d3.scaleOrdinal(d3.schemeCategory10)\n                .domain([...new Set(data.map(getCategory))].sort());\n            const getColor = datum => color(getCategory(datum));\n\n            const legend = svg.append('g')\n                .attr('id', 'legend');\n            legend.call(d3.legendColor()\n                .title('Nationality')\n                .shape('circle')\n                .shapeRadius(pointRadius)\n                .shapePadding(10)\n                .scale(color));\n            const legendBox = legend.node().getBBox();\n            const legendPadding = 10;\n            const legendMargin = 10;\n            const legendX = xMax - legendBox.width + legendBox.x - legendPadding - legendMargin;\n            const legendY = yMin - legendBox.y + legendPadding + legendMargin;\n            legend.attr('transform', `translate(${legendX}, ${legendY})`);\n            legend.insert('rect', '.legendCells')\n                .attr('id', 'legend-background')\n                .attr('x', legendBox.x - legendPadding)\n                .attr('y', legendBox.y - legendPadding)\n                .attr('width', legendBox.width + (legendPadding*2))\n                .attr('height', legendBox.height + (legendPadding*2));\n            \n            svg.appendForEach('circle', data)\n                .attr('class', 'dot')\n                .attr('cx', getX)\n                .attr('cy', getY)\n                .attr('r', pointRadius)\n                .style('fill', getColor)\n                .attr('data-xvalue', getYear)\n                .attr('data-yvalue', getDuration)\n                .on('mouseover', tip.show)\n                .on('mouseout', tip.hide);\n            \n            \n        });\n\n    svg.append('rect')\n        .attr('id', 'background')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', svgWidth)\n        .attr('height', svgHeight);\n\n\n\n    // svg.append('rect')\n    //     .attr('x', 0)\n    //     .attr('y', 0)\n    //     .attr('width', height / 4)\n    //     .attr('height', height / 4)\n    //     .attr('style', 'fill:rgb(0,0,255)');\n\n    // svg.append('rect')\n    //     .attr('x', height / 2)\n    //     .attr('y', height / 2)\n    //     .attr('width', height / 2)\n    //     .attr('height', height / 2)\n    //     .attr('style', 'fill:rgb(255,0,0)');\n\n    // svg.append('rect')\n    //     .attr('x', 0)\n    //     .attr('y', height / 2)\n    //     .attr('width', height / 2)\n    //     .attr('height', height / 2)\n    //     .attr('style', 'fill:rgb(0,255,0)');\n\n    // svg.append('rect')\n    //     .attr('x', width - height / 2)\n    //     .attr('y', height / 2)\n    //     .attr('width', height / 2)\n    //     .attr('height', height / 2)\n    //     .attr('style', 'fill:rgb(100,100,100)');\n};\n\nexport default d3CyclistChart;","import React from 'react';\nimport styled from 'styled-components';\nimport ScaledD3Container from '../ScaledD3Container';\nimport dCyclistChart from './CyclistChart.d3';\nimport './CyclistChart.css';\nimport useDimensions from 'react-use-dimensions';\n\nconst FullScreenContainer = styled.div`\n    padding: 10px;\n    height: calc(100vh - ${({marginTop}) => `${marginTop}px`});\n`;\n\nconst CyclistChart = () => {\n    const [ref, {height}] = useDimensions();\n\n    return (\n        <>\n            <h1 id='title' ref={ref}>Cycling Times</h1>\n            <FullScreenContainer marginTop={height + 30}>\n                <ScaledD3Container drawSvg={dCyclistChart} viewBox={{ width: 1600, height: 900 }} />\n            </FullScreenContainer>\n        </>\n    );\n};\n\nexport default CyclistChart;\n","import React from 'react';\nimport CyclistChart from './CyclistChart';\nimport { useFccTest, FccTests } from '@asteffey/react-fcc-test';\n\nconst App = () => {\n    useFccTest({\n        fccTest: FccTests.scatter_plot,\n        queryParam: 'fcc-test'\n    });\n\n    return (\n        <main>\n            <CyclistChart />\n        </main>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}